// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under
// the MIT License. See LICENSE in the project root for license information.
// <autogenerated> This file was generated using AutoRest. </autogenerated>

namespace SocialPlus.Client
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for MyFollowing.
    /// </summary>
    public static partial class MyFollowingExtensions
    {
            /// <summary>
            /// Get the feed of users that I am following
            /// </summary>
            /// These are the users whose topics appear on my following topics feed, and
            /// whose activities
            /// appear on my following activities feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cursor'>
            /// Current read cursor
            /// </param>
            /// <param name='limit'>
            /// Number of items to return
            /// </param>
            public static FeedResponseUserCompactView GetFollowingUsers(this IMyFollowing operations, string authorization, string cursor = default(string), int? limit = default(int?))
            {
                return Task.Factory.StartNew(s => ((IMyFollowing)s).GetFollowingUsersAsync(authorization, cursor, limit), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the feed of users that I am following
            /// </summary>
            /// These are the users whose topics appear on my following topics feed, and
            /// whose activities
            /// appear on my following activities feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cursor'>
            /// Current read cursor
            /// </param>
            /// <param name='limit'>
            /// Number of items to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FeedResponseUserCompactView> GetFollowingUsersAsync(this IMyFollowing operations, string authorization, string cursor = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFollowingUsersWithHttpMessagesAsync(authorization, cursor, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Follow a user
            /// </summary>
            /// When I follow a user, that user will appear on my following feed. That
            /// feed is
            /// visible to all users, unless my profile is set to private, in
            /// which case only those
            /// users that request to follow me and I approve will see that
            /// feed. If I try to follow a
            /// user with a private profile, then that private user controls
            /// whether I am allowed to
            /// follow them or not.
            /// That user's topics will appear in my following topics feed and
            /// actions
            /// performed by that user will also appear in my following
            /// activities feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Post following user request
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            public static object PostFollowingUser(this IMyFollowing operations, PostFollowingUserRequest request, string authorization)
            {
                return Task.Factory.StartNew(s => ((IMyFollowing)s).PostFollowingUserAsync(request, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Follow a user
            /// </summary>
            /// When I follow a user, that user will appear on my following feed. That
            /// feed is
            /// visible to all users, unless my profile is set to private, in
            /// which case only those
            /// users that request to follow me and I approve will see that
            /// feed. If I try to follow a
            /// user with a private profile, then that private user controls
            /// whether I am allowed to
            /// follow them or not.
            /// That user's topics will appear in my following topics feed and
            /// actions
            /// performed by that user will also appear in my following
            /// activities feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Post following user request
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostFollowingUserAsync(this IMyFollowing operations, PostFollowingUserRequest request, string authorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostFollowingUserWithHttpMessagesAsync(request, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the feed of topics that I am following
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cursor'>
            /// Current read cursor
            /// </param>
            /// <param name='limit'>
            /// Number of items to return
            /// </param>
            public static FeedResponseTopicView GetFollowingTopics(this IMyFollowing operations, string authorization, string cursor = default(string), int? limit = default(int?))
            {
                return Task.Factory.StartNew(s => ((IMyFollowing)s).GetFollowingTopicsAsync(authorization, cursor, limit), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the feed of topics that I am following
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cursor'>
            /// Current read cursor
            /// </param>
            /// <param name='limit'>
            /// Number of items to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FeedResponseTopicView> GetFollowingTopicsAsync(this IMyFollowing operations, string authorization, string cursor = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFollowingTopicsWithHttpMessagesAsync(authorization, cursor, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Follow a topic
            /// </summary>
            /// When I follow a topic, that topic will appear on my following topics feed.
            /// When users
            /// perform actions on the topic (such as posting comments or
            /// replies), those actions will
            /// appear on my following activites feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Post following topic request
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            public static object PostFollowingTopic(this IMyFollowing operations, PostFollowingTopicRequest request, string authorization)
            {
                return Task.Factory.StartNew(s => ((IMyFollowing)s).PostFollowingTopicAsync(request, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Follow a topic
            /// </summary>
            /// When I follow a topic, that topic will appear on my following topics feed.
            /// When users
            /// perform actions on the topic (such as posting comments or
            /// replies), those actions will
            /// appear on my following activites feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Post following topic request
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostFollowingTopicAsync(this IMyFollowing operations, PostFollowingTopicRequest request, string authorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostFollowingTopicWithHttpMessagesAsync(request, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unfollow a user
            /// </summary>
            /// After I unfollow a user, that user will no longer appear on my following
            /// feed.
            /// All of that user's previous topics will be removed from my
            /// following topics feed and
            /// none of their future topics will be added to that feed.
            /// Their past and future activities will no longer appear in my
            /// following activities feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userHandle'>
            /// Handle of following user
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            public static object DeleteFollowingUser(this IMyFollowing operations, string userHandle, string authorization)
            {
                return Task.Factory.StartNew(s => ((IMyFollowing)s).DeleteFollowingUserAsync(userHandle, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unfollow a user
            /// </summary>
            /// After I unfollow a user, that user will no longer appear on my following
            /// feed.
            /// All of that user's previous topics will be removed from my
            /// following topics feed and
            /// none of their future topics will be added to that feed.
            /// Their past and future activities will no longer appear in my
            /// following activities feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userHandle'>
            /// Handle of following user
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteFollowingUserAsync(this IMyFollowing operations, string userHandle, string authorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteFollowingUserWithHttpMessagesAsync(userHandle, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unfollow a topic
            /// </summary>
            /// After I unfollow a topic, that topic will no longer appear on my following
            /// topics feed.
            /// The past and future activities on that topic will no longer
            /// appear in my following activities feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='topicHandle'>
            /// Handle of following topic
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            public static object DeleteFollowingTopic(this IMyFollowing operations, string topicHandle, string authorization)
            {
                return Task.Factory.StartNew(s => ((IMyFollowing)s).DeleteFollowingTopicAsync(topicHandle, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unfollow a topic
            /// </summary>
            /// After I unfollow a topic, that topic will no longer appear on my following
            /// topics feed.
            /// The past and future activities on that topic will no longer
            /// appear in my following activities feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='topicHandle'>
            /// Handle of following topic
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteFollowingTopicAsync(this IMyFollowing operations, string topicHandle, string authorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteFollowingTopicWithHttpMessagesAsync(topicHandle, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a topic from my combined following topics feed.
            /// </summary>
            /// My combined following topics feed is a feed of topics I am explicitly
            /// following, combined with topics created by all users
            /// that I am following.  This call will remove the specified
            /// topic from that feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='topicHandle'>
            /// Handle of following topic
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            public static object DeleteTopicFromCombinedFollowingFeed(this IMyFollowing operations, string topicHandle, string authorization)
            {
                return Task.Factory.StartNew(s => ((IMyFollowing)s).DeleteTopicFromCombinedFollowingFeedAsync(topicHandle, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a topic from my combined following topics feed.
            /// </summary>
            /// My combined following topics feed is a feed of topics I am explicitly
            /// following, combined with topics created by all users
            /// that I am following.  This call will remove the specified
            /// topic from that feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='topicHandle'>
            /// Handle of following topic
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteTopicFromCombinedFollowingFeedAsync(this IMyFollowing operations, string topicHandle, string authorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTopicFromCombinedFollowingFeedWithHttpMessagesAsync(topicHandle, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get my combined following topics feed.
            /// </summary>
            /// My combined following topics feed includes:
            /// (1) topics that I'm explicitly following and
            /// (2) topics authored by users that I'm following
            /// 
            /// This feed is time ordered, with the most recent topic first.
            /// This feed will not include topics that I have explicitly
            /// deleted from this feed.
            /// When I follow a user, a limited set of their past topics will
            /// be added to this feed,
            /// and all their future topics will be added to this feed when
            /// they are created.
            /// When I unfollow a user, all of their previous topics will be
            /// removed from the feed and
            /// none of their future topics will be added to this feed.
            /// When I follow a topic, it will appear in this feed.
            /// When I unfollow a topic, it will no longer appear in this
            /// feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cursor'>
            /// Current read cursor
            /// </param>
            /// <param name='limit'>
            /// Number of items to return
            /// </param>
            public static FeedResponseTopicView GetTopics(this IMyFollowing operations, string authorization, string cursor = default(string), int? limit = default(int?))
            {
                return Task.Factory.StartNew(s => ((IMyFollowing)s).GetTopicsAsync(authorization, cursor, limit), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get my combined following topics feed.
            /// </summary>
            /// My combined following topics feed includes:
            /// (1) topics that I'm explicitly following and
            /// (2) topics authored by users that I'm following
            /// 
            /// This feed is time ordered, with the most recent topic first.
            /// This feed will not include topics that I have explicitly
            /// deleted from this feed.
            /// When I follow a user, a limited set of their past topics will
            /// be added to this feed,
            /// and all their future topics will be added to this feed when
            /// they are created.
            /// When I unfollow a user, all of their previous topics will be
            /// removed from the feed and
            /// none of their future topics will be added to this feed.
            /// When I follow a topic, it will appear in this feed.
            /// When I unfollow a topic, it will no longer appear in this
            /// feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cursor'>
            /// Current read cursor
            /// </param>
            /// <param name='limit'>
            /// Number of items to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FeedResponseTopicView> GetTopicsAsync(this IMyFollowing operations, string authorization, string cursor = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTopicsWithHttpMessagesAsync(authorization, cursor, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the feed of activities by users that I'm following or on topics that
            /// I'm following.
            /// </summary>
            /// My following activity feed is a list of activities that are either
            /// (1) performed by users that I am following, or
            /// (2) performed on topics that I am following.
            /// This feed is time ordered, with the most recent activity
            /// first.
            /// An activity is added to this feed when a user I am following
            /// does one of the following 4 actions:
            /// (a) create a comment; (b) create a reply; (c) like a topic;
            /// (d) follow a user.
            /// If a user that I am following is deleted, then their past
            /// activities will no longer appear in this feed.
            /// If an activity is performed on content that is then deleted,
            /// that activity will no longer appear in this feed.
            /// If a user has un-done an activity (e.g. unlike a previous
            /// like), then that activity will no longer appear in this feed.
            /// Similarly, an activity is added to this feed when a user does
            /// one of the following 3 actions on a topic that I am following:
            /// (a) create a comment; (b) create a reply; (c) like the topic.
            /// If a topic that I am following is deleted, then past
            /// activities on that topic will no longer appear in this feed.
            /// If an activity that is performed is then deleted, that
            /// activity will no longer appear in this feed.
            /// Ignore the unread status of each activity - it will always be
            /// true.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cursor'>
            /// Current read cursor
            /// </param>
            /// <param name='limit'>
            /// Number of items to return
            /// </param>
            public static FeedResponseActivityView GetActivities(this IMyFollowing operations, string authorization, string cursor = default(string), int? limit = default(int?))
            {
                return Task.Factory.StartNew(s => ((IMyFollowing)s).GetActivitiesAsync(authorization, cursor, limit), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the feed of activities by users that I'm following or on topics that
            /// I'm following.
            /// </summary>
            /// My following activity feed is a list of activities that are either
            /// (1) performed by users that I am following, or
            /// (2) performed on topics that I am following.
            /// This feed is time ordered, with the most recent activity
            /// first.
            /// An activity is added to this feed when a user I am following
            /// does one of the following 4 actions:
            /// (a) create a comment; (b) create a reply; (c) like a topic;
            /// (d) follow a user.
            /// If a user that I am following is deleted, then their past
            /// activities will no longer appear in this feed.
            /// If an activity is performed on content that is then deleted,
            /// that activity will no longer appear in this feed.
            /// If a user has un-done an activity (e.g. unlike a previous
            /// like), then that activity will no longer appear in this feed.
            /// Similarly, an activity is added to this feed when a user does
            /// one of the following 3 actions on a topic that I am following:
            /// (a) create a comment; (b) create a reply; (c) like the topic.
            /// If a topic that I am following is deleted, then past
            /// activities on that topic will no longer appear in this feed.
            /// If an activity that is performed is then deleted, that
            /// activity will no longer appear in this feed.
            /// Ignore the unread status of each activity - it will always be
            /// true.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cursor'>
            /// Current read cursor
            /// </param>
            /// <param name='limit'>
            /// Number of items to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FeedResponseActivityView> GetActivitiesAsync(this IMyFollowing operations, string authorization, string cursor = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivitiesWithHttpMessagesAsync(authorization, cursor, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get my suggestions of users to follow.
            /// </summary>
            /// This call uses the token from the Authorization header to determine the
            /// type of suggestions to provide.
            /// In particular, the token determines which third-party to
            /// contact to obtain a list of suggested users,
            /// such as friends (for Facebook), following users (for Twitter),
            /// and contacts (for Google and Microsoft).
            /// We check each retrieved user to see whether they are
            /// registered with Embedded Social (this is done by checking
            /// whether the user appears as a linked account in any Embedded
            /// Social profile).
            /// Note that passing a token without the appropiate scopes will
            /// prevent Embedded Social from obtaining a list
            /// of suggested users.
            /// Support for input parameters 'cursor' and 'limit' is not
            /// implemented in the current API release.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cursor'>
            /// Current read cursor
            /// </param>
            /// <param name='limit'>
            /// Number of users compact views to return
            /// </param>
            public static IList<UserCompactView> GetSuggestionsUsers(this IMyFollowing operations, string authorization, string cursor = default(string), int? limit = default(int?))
            {
                return Task.Factory.StartNew(s => ((IMyFollowing)s).GetSuggestionsUsersAsync(authorization, cursor, limit), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get my suggestions of users to follow.
            /// </summary>
            /// This call uses the token from the Authorization header to determine the
            /// type of suggestions to provide.
            /// In particular, the token determines which third-party to
            /// contact to obtain a list of suggested users,
            /// such as friends (for Facebook), following users (for Twitter),
            /// and contacts (for Google and Microsoft).
            /// We check each retrieved user to see whether they are
            /// registered with Embedded Social (this is done by checking
            /// whether the user appears as a linked account in any Embedded
            /// Social profile).
            /// Note that passing a token without the appropiate scopes will
            /// prevent Embedded Social from obtaining a list
            /// of suggested users.
            /// Support for input parameters 'cursor' and 'limit' is not
            /// implemented in the current API release.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cursor'>
            /// Current read cursor
            /// </param>
            /// <param name='limit'>
            /// Number of users compact views to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserCompactView>> GetSuggestionsUsersAsync(this IMyFollowing operations, string authorization, string cursor = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSuggestionsUsersWithHttpMessagesAsync(authorization, cursor, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
