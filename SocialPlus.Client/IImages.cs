// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under
// the MIT License. See LICENSE in the project root for license information.
// <autogenerated> This file was generated using AutoRest. </autogenerated>

namespace SocialPlus.Client
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Images operations.
    /// </summary>
    public partial interface IImages
    {
        /// <summary>
        /// Upload a new image
        /// </summary>
        /// Images will be resized. To access a resized image, append the 1
        /// character size identifier to the blobHandle that is returned.
        /// 
        /// - d is 25 pixels wide
        /// - h is 50 pixels wide
        /// - l is 100 pixels wide
        /// - p is 250 pixels wide
        /// - t is 500 pixels wide
        /// - x is 1000 pixels wide
        /// 
        /// - ImageType.UserPhoto supports d,h,l,p,t,x
        /// - ImageType.ContentBlob supports d,h,l,p,t,x
        /// - ImageType.AppIcon supports l
        /// 
        /// All resized images will maintain their aspect ratio.
        /// Any orientation specified in the EXIF headers will be honored.
        /// <param name='imageType'>
        /// Image type. Possible values include: 'UserPhoto', 'ContentBlob',
        /// 'AppIcon'
        /// </param>
        /// <param name='authorization'>
        /// Format is: "Scheme CredentialsList". Possible values are:
        /// 
        /// - Anon AK=AppKey
        /// 
        /// - SocialPlus TK=SessionToken
        /// 
        /// - Facebook AK=AppKey|TK=AccessToken
        /// 
        /// - Google AK=AppKey|TK=AccessToken
        /// 
        /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
        /// 
        /// - Microsoft AK=AppKey|TK=AccessToken
        /// 
        /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
        /// </param>
        /// <param name='image'>
        /// MIME encoded contents of the image
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PostImageResponse>> PostImageWithHttpMessagesAsync(ImageType imageType, string authorization, System.IO.Stream image, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get image
        /// </summary>
        /// <param name='blobHandle'>
        /// Blob handle
        /// </param>
        /// <param name='authorization'>
        /// Format is: "Scheme CredentialsList". Possible values are:
        /// 
        /// - Anon AK=AppKey
        /// 
        /// - SocialPlus TK=SessionToken
        /// 
        /// - Facebook AK=AppKey|TK=AccessToken
        /// 
        /// - Google AK=AppKey|TK=AccessToken
        /// 
        /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
        /// 
        /// - Microsoft AK=AppKey|TK=AccessToken
        /// 
        /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<System.IO.Stream>> GetImageWithHttpMessagesAsync(string blobHandle, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
