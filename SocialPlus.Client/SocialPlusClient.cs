// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under
// the MIT License. See LICENSE in the project root for license information.
// <autogenerated> This file was generated using AutoRest. </autogenerated>

namespace SocialPlus.Client
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using Models;

    /// <summary>
    /// The Embedded Social interface to clients is a RESTful API which is
    /// documented here.
    /// </summary>
    public partial class SocialPlusClient : ServiceClient<SocialPlusClient>, ISocialPlusClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }        

        /// <summary>
        /// Gets the IBlobs.
        /// </summary>
        public virtual IBlobs Blobs { get; private set; }

        /// <summary>
        /// Gets the IComments.
        /// </summary>
        public virtual IComments Comments { get; private set; }

        /// <summary>
        /// Gets the ITopicComments.
        /// </summary>
        public virtual ITopicComments TopicComments { get; private set; }

        /// <summary>
        /// Gets the IConfig.
        /// </summary>
        public virtual IConfig Config { get; private set; }

        /// <summary>
        /// Gets the IHashtags.
        /// </summary>
        public virtual IHashtags Hashtags { get; private set; }

        /// <summary>
        /// Gets the IImages.
        /// </summary>
        public virtual IImages Images { get; private set; }

        /// <summary>
        /// Gets the ITopicLikes.
        /// </summary>
        public virtual ITopicLikes TopicLikes { get; private set; }

        /// <summary>
        /// Gets the IReplyLikes.
        /// </summary>
        public virtual IReplyLikes ReplyLikes { get; private set; }

        /// <summary>
        /// Gets the ICommentLikes.
        /// </summary>
        public virtual ICommentLikes CommentLikes { get; private set; }

        /// <summary>
        /// Gets the IMyNotifications.
        /// </summary>
        public virtual IMyNotifications MyNotifications { get; private set; }

        /// <summary>
        /// Gets the IMyPins.
        /// </summary>
        public virtual IMyPins MyPins { get; private set; }

        /// <summary>
        /// Gets the IMyPushRegistrations.
        /// </summary>
        public virtual IMyPushRegistrations MyPushRegistrations { get; private set; }

        /// <summary>
        /// Gets the IReplies.
        /// </summary>
        public virtual IReplies Replies { get; private set; }

        /// <summary>
        /// Gets the ICommentReplies.
        /// </summary>
        public virtual ICommentReplies CommentReplies { get; private set; }

        /// <summary>
        /// Gets the IUserReports.
        /// </summary>
        public virtual IUserReports UserReports { get; private set; }

        /// <summary>
        /// Gets the ITopicReports.
        /// </summary>
        public virtual ITopicReports TopicReports { get; private set; }

        /// <summary>
        /// Gets the IReplyReports.
        /// </summary>
        public virtual IReplyReports ReplyReports { get; private set; }

        /// <summary>
        /// Gets the ICommentReports.
        /// </summary>
        public virtual ICommentReports CommentReports { get; private set; }

        /// <summary>
        /// Gets the ISearch.
        /// </summary>
        public virtual ISearch Search { get; private set; }

        /// <summary>
        /// Gets the ISessions.
        /// </summary>
        public virtual ISessions Sessions { get; private set; }

        /// <summary>
        /// Gets the IRequestTokens.
        /// </summary>
        public virtual IRequestTokens RequestTokens { get; private set; }

        /// <summary>
        /// Gets the IUserFollowers.
        /// </summary>
        public virtual IUserFollowers UserFollowers { get; private set; }

        /// <summary>
        /// Gets the IMyPendingUsers.
        /// </summary>
        public virtual IMyPendingUsers MyPendingUsers { get; private set; }

        /// <summary>
        /// Gets the IMyFollowers.
        /// </summary>
        public virtual IMyFollowers MyFollowers { get; private set; }

        /// <summary>
        /// Gets the IMyFollowing.
        /// </summary>
        public virtual IMyFollowing MyFollowing { get; private set; }

        /// <summary>
        /// Gets the IMyBlockedUsers.
        /// </summary>
        public virtual IMyBlockedUsers MyBlockedUsers { get; private set; }

        /// <summary>
        /// Gets the IUserFollowing.
        /// </summary>
        public virtual IUserFollowing UserFollowing { get; private set; }

        /// <summary>
        /// Gets the ITopics.
        /// </summary>
        public virtual ITopics Topics { get; private set; }

        /// <summary>
        /// Gets the IMyTopics.
        /// </summary>
        public virtual IMyTopics MyTopics { get; private set; }

        /// <summary>
        /// Gets the IMyAppFollowing.
        /// </summary>
        public virtual IMyAppFollowing MyAppFollowing { get; private set; }

        /// <summary>
        /// Gets the IMyApps.
        /// </summary>
        public virtual IMyApps MyApps { get; private set; }

        /// <summary>
        /// Gets the IMyLikes.
        /// </summary>
        public virtual IMyLikes MyLikes { get; private set; }

        /// <summary>
        /// Gets the IMyLinkedAccounts.
        /// </summary>
        public virtual IMyLinkedAccounts MyLinkedAccounts { get; private set; }

        /// <summary>
        /// Gets the IUsers.
        /// </summary>
        public virtual IUsers Users { get; private set; }

        /// <summary>
        /// Gets the IUserTopics.
        /// </summary>
        public virtual IUserTopics UserTopics { get; private set; }

        /// <summary>
        /// Initializes a new instance of the SocialPlusClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SocialPlusClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SocialPlusClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SocialPlusClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SocialPlusClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SocialPlusClient(Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SocialPlusClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SocialPlusClient(Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary> 
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.Blobs = new Blobs(this);
            this.Comments = new Comments(this);
            this.TopicComments = new TopicComments(this);
            this.Config = new Config(this);
            this.Hashtags = new Hashtags(this);
            this.Images = new Images(this);
            this.TopicLikes = new TopicLikes(this);
            this.ReplyLikes = new ReplyLikes(this);
            this.CommentLikes = new CommentLikes(this);
            this.MyNotifications = new MyNotifications(this);
            this.MyPins = new MyPins(this);
            this.MyPushRegistrations = new MyPushRegistrations(this);
            this.Replies = new Replies(this);
            this.CommentReplies = new CommentReplies(this);
            this.UserReports = new UserReports(this);
            this.TopicReports = new TopicReports(this);
            this.ReplyReports = new ReplyReports(this);
            this.CommentReports = new CommentReports(this);
            this.Search = new Search(this);
            this.Sessions = new Sessions(this);
            this.RequestTokens = new RequestTokens(this);
            this.UserFollowers = new UserFollowers(this);
            this.MyPendingUsers = new MyPendingUsers(this);
            this.MyFollowers = new MyFollowers(this);
            this.MyFollowing = new MyFollowing(this);
            this.MyBlockedUsers = new MyBlockedUsers(this);
            this.UserFollowing = new UserFollowing(this);
            this.Topics = new Topics(this);
            this.MyTopics = new MyTopics(this);
            this.MyAppFollowing = new MyAppFollowing(this);
            this.MyApps = new MyApps(this);
            this.MyLikes = new MyLikes(this);
            this.MyLinkedAccounts = new MyLinkedAccounts(this);
            this.Users = new Users(this);
            this.UserTopics = new UserTopics(this);
            this.BaseUri = new Uri("https://api.embeddedsocial.microsoft.com");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Formatting.Indented,
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }    
    }
}
