// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under
// the MIT License. See LICENSE in the project root for license information.
// <autogenerated> This file was generated using AutoRest. </autogenerated>

namespace SocialPlus.Client
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Config.
    /// </summary>
    public static partial class ConfigExtensions
    {
            /// <summary>
            /// Get build information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetBuildInfoResponse GetBuildInfo(this IConfig operations)
            {
                return Task.Factory.StartNew(s => ((IConfig)s).GetBuildInfoAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get build information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetBuildInfoResponse> GetBuildInfoAsync(this IConfig operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBuildInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get service information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetServiceInfoResponse GetServiceInfo(this IConfig operations)
            {
                return Task.Factory.StartNew(s => ((IConfig)s).GetServiceInfoAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get service information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetServiceInfoResponse> GetServiceInfoAsync(this IConfig operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServiceInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the configuration of a client for a given client name.
            /// </summary>
            /// Applications can use client names to lookup client configurations. The
            /// client configuration contains two fields:
            /// ServerSideAppKey and ClientConfigJson. The intended usage of
            /// ServerSideAppKey is described below, and
            /// ClientConfigJson provides a container for any other
            /// configuration that developers want to avoid hard-coding into their apps.
            /// 
            /// Although we do not require it, we recommend that applications
            /// split their app keys into a client-side and server-side component.
            /// To lookup a particular split app key, you must provide the
            /// client name associated with that app key.
            /// Examples:
            /// 1. If the application name is "Starbucks", the client name
            /// could be "Starbucks:1.0".
            /// 2. When multiple app keys are split, each server-side
            /// component of the app keys must be registered
            /// under different client names, such as "Starbucks:USA:1.0"
            /// and "Starbucks:EU:1.0", or "Starbucks:1.0" and "Starbucks:2.0".
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='developerId'>
            /// developer id
            /// </param>
            /// <param name='clientName'>
            /// client name
            /// </param>
            public static GetClientConfigResponse GetClientConfig(this IConfig operations, string developerId, string clientName)
            {
                return Task.Factory.StartNew(s => ((IConfig)s).GetClientConfigAsync(developerId, clientName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the configuration of a client for a given client name.
            /// </summary>
            /// Applications can use client names to lookup client configurations. The
            /// client configuration contains two fields:
            /// ServerSideAppKey and ClientConfigJson. The intended usage of
            /// ServerSideAppKey is described below, and
            /// ClientConfigJson provides a container for any other
            /// configuration that developers want to avoid hard-coding into their apps.
            /// 
            /// Although we do not require it, we recommend that applications
            /// split their app keys into a client-side and server-side component.
            /// To lookup a particular split app key, you must provide the
            /// client name associated with that app key.
            /// Examples:
            /// 1. If the application name is "Starbucks", the client name
            /// could be "Starbucks:1.0".
            /// 2. When multiple app keys are split, each server-side
            /// component of the app keys must be registered
            /// under different client names, such as "Starbucks:USA:1.0"
            /// and "Starbucks:EU:1.0", or "Starbucks:1.0" and "Starbucks:2.0".
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='developerId'>
            /// developer id
            /// </param>
            /// <param name='clientName'>
            /// client name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetClientConfigResponse> GetClientConfigAsync(this IConfig operations, string developerId, string clientName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClientConfigWithHttpMessagesAsync(developerId, clientName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
