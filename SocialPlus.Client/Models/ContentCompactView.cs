// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under
// the MIT License. See LICENSE in the project root for license information.
// <autogenerated> This file was generated using AutoRest. </autogenerated>

namespace SocialPlus.Client.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Content compact view
    /// </summary>
    public partial class ContentCompactView
    {
        /// <summary>
        /// Initializes a new instance of the ContentCompactView class.
        /// </summary>
        public ContentCompactView() { }

        /// <summary>
        /// Initializes a new instance of the ContentCompactView class.
        /// </summary>
        public ContentCompactView(ContentType contentType, string contentHandle, string text, string parentHandle = default(string), string rootHandle = default(string), BlobType? blobType = default(BlobType?), string blobHandle = default(string), string blobUrl = default(string))
        {
            ContentType = contentType;
            ContentHandle = contentHandle;
            ParentHandle = parentHandle;
            RootHandle = rootHandle;
            Text = text;
            BlobType = blobType;
            BlobHandle = blobHandle;
            BlobUrl = blobUrl;
        }

        /// <summary>
        /// Gets or sets content type. Possible values include: 'Unknown',
        /// 'Topic', 'Comment', 'Reply'
        /// </summary>
        [JsonProperty(PropertyName = "contentType")]
        public ContentType ContentType { get; set; }

        /// <summary>
        /// Gets or sets content handle
        /// </summary>
        [JsonProperty(PropertyName = "contentHandle")]
        public string ContentHandle { get; set; }

        /// <summary>
        /// Gets or sets parent handle
        /// </summary>
        [JsonProperty(PropertyName = "parentHandle")]
        public string ParentHandle { get; set; }

        /// <summary>
        /// Gets or sets root handle
        /// </summary>
        [JsonProperty(PropertyName = "rootHandle")]
        public string RootHandle { get; set; }

        /// <summary>
        /// Gets or sets content text
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets content blob type. Possible values include:
        /// 'Unknown', 'Image', 'Video', 'Custom'
        /// </summary>
        [JsonProperty(PropertyName = "blobType")]
        public BlobType? BlobType { get; set; }

        /// <summary>
        /// Gets or sets content blob handle
        /// </summary>
        [JsonProperty(PropertyName = "blobHandle")]
        public string BlobHandle { get; set; }

        /// <summary>
        /// Gets or sets content blob url
        /// </summary>
        [JsonProperty(PropertyName = "blobUrl")]
        public string BlobUrl { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (ContentHandle == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContentHandle");
            }
            if (Text == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Text");
            }
        }
    }
}
