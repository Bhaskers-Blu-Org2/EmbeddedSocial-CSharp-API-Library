// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under
// the MIT License. See LICENSE in the project root for license information.
// <autogenerated> This file was generated using AutoRest. </autogenerated>

namespace SocialPlus.Client.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Comment view
    /// </summary>
    public partial class CommentView
    {
        /// <summary>
        /// Initializes a new instance of the CommentView class.
        /// </summary>
        public CommentView() { }

        /// <summary>
        /// Initializes a new instance of the CommentView class.
        /// </summary>
        public CommentView(string commentHandle, string topicHandle, DateTime createdTime, DateTime lastUpdatedTime, UserCompactView user, string text, long totalLikes, long totalReplies, bool liked, BlobType? blobType = default(BlobType?), string blobHandle = default(string), string blobUrl = default(string), string language = default(string), ContentStatus? contentStatus = default(ContentStatus?))
        {
            CommentHandle = commentHandle;
            TopicHandle = topicHandle;
            CreatedTime = createdTime;
            LastUpdatedTime = lastUpdatedTime;
            User = user;
            Text = text;
            BlobType = blobType;
            BlobHandle = blobHandle;
            BlobUrl = blobUrl;
            Language = language;
            TotalLikes = totalLikes;
            TotalReplies = totalReplies;
            Liked = liked;
            ContentStatus = contentStatus;
        }

        /// <summary>
        /// Gets or sets comment handle
        /// </summary>
        [JsonProperty(PropertyName = "commentHandle")]
        public string CommentHandle { get; set; }

        /// <summary>
        /// Gets or sets parent topic handle
        /// </summary>
        [JsonProperty(PropertyName = "topicHandle")]
        public string TopicHandle { get; set; }

        /// <summary>
        /// Gets or sets created time
        /// </summary>
        [JsonProperty(PropertyName = "createdTime")]
        public DateTime CreatedTime { get; set; }

        /// <summary>
        /// Gets or sets last updated time
        /// </summary>
        [JsonProperty(PropertyName = "lastUpdatedTime")]
        public DateTime LastUpdatedTime { get; set; }

        /// <summary>
        /// Gets or sets owner of the comment
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public UserCompactView User { get; set; }

        /// <summary>
        /// Gets or sets comment text
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets comment blob type. Possible values include:
        /// 'Unknown', 'Image', 'Video', 'Custom'
        /// </summary>
        [JsonProperty(PropertyName = "blobType")]
        public BlobType? BlobType { get; set; }

        /// <summary>
        /// Gets or sets comment blob handle
        /// </summary>
        [JsonProperty(PropertyName = "blobHandle")]
        public string BlobHandle { get; set; }

        /// <summary>
        /// Gets or sets comment blob url
        /// </summary>
        [JsonProperty(PropertyName = "blobUrl")]
        public string BlobUrl { get; set; }

        /// <summary>
        /// Gets or sets comment language
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// Gets or sets total likes for the comment
        /// </summary>
        [JsonProperty(PropertyName = "totalLikes")]
        public long TotalLikes { get; set; }

        /// <summary>
        /// Gets or sets total replies for the comment
        /// </summary>
        [JsonProperty(PropertyName = "totalReplies")]
        public long TotalReplies { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the querying user has
        /// liked the comment
        /// </summary>
        [JsonProperty(PropertyName = "liked")]
        public bool Liked { get; set; }

        /// <summary>
        /// Gets or sets content status. Possible values include: 'Active',
        /// 'Banned', 'Mature', 'Clean'
        /// </summary>
        [JsonProperty(PropertyName = "contentStatus")]
        public ContentStatus? ContentStatus { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (CommentHandle == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CommentHandle");
            }
            if (TopicHandle == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TopicHandle");
            }
            if (User == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "User");
            }
            if (Text == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Text");
            }
            if (this.User != null)
            {
                this.User.Validate();
            }
        }
    }
}
