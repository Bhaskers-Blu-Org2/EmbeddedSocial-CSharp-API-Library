// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under
// the MIT License. See LICENSE in the project root for license information.
// <autogenerated> This file was generated using AutoRest. </autogenerated>

namespace SocialPlus.Client
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Config operations.
    /// </summary>
    public partial interface IConfig
    {
        /// <summary>
        /// Get build information
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetBuildInfoResponse>> GetBuildInfoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get service information
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetServiceInfoResponse>> GetServiceInfoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the configuration of a client for a given client name.
        /// </summary>
        /// Applications can use client names to lookup client configurations.
        /// The client configuration contains two fields:
        /// ServerSideAppKey and ClientConfigJson. The intended
        /// usage of ServerSideAppKey is described below, and
        /// ClientConfigJson provides a container for any other
        /// configuration that developers want to avoid hard-coding into
        /// their apps.
        /// 
        /// Although we do not require it, we recommend that
        /// applications split their app keys into a client-side and
        /// server-side component.
        /// To lookup a particular split app key, you must
        /// provide the client name associated with that app key.
        /// Examples:
        /// 1. If the application name is "Starbucks", the client
        /// name could be "Starbucks:1.0".
        /// 2. When multiple app keys are split, each server-side
        /// component of the app keys must be registered
        /// under different client names, such as
        /// "Starbucks:USA:1.0" and "Starbucks:EU:1.0", or "Starbucks:1.0"
        /// and "Starbucks:2.0".
        /// <param name='developerId'>
        /// developer id
        /// </param>
        /// <param name='clientName'>
        /// client name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetClientConfigResponse>> GetClientConfigWithHttpMessagesAsync(string developerId, string clientName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
