// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under
// the MIT License. See LICENSE in the project root for license information.
// <autogenerated> This file was generated using AutoRest. </autogenerated>

namespace SocialPlus.Client
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for MyBlockedUsers.
    /// </summary>
    public static partial class MyBlockedUsersExtensions
    {
            /// <summary>
            /// Get my blocked users
            /// </summary>
            /// This is a feed of users that I have blocked. Any user on this list
            /// cannot see topics authored by me. However, any such user will
            /// see comments
            /// and replies that I create on topics authored by other users or
            /// by the app.
            /// Any such user will also be able to observe that activities
            /// have been performed
            /// by users on my topics.
            /// I will not appear in any such user's following feed, and those
            /// users will not
            /// appear in my followers feed.
            /// If I am following any user in this feed, that relationship
            /// will continue and I
            /// will continue to see topics and activities by that user and I
            /// will appear in
            /// that user's follower feed and that user will appear in my
            /// following feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cursor'>
            /// Current read cursor
            /// </param>
            /// <param name='limit'>
            /// Number of items to return
            /// </param>
            public static FeedResponseUserCompactView GetBlockedUsers(this IMyBlockedUsers operations, string authorization, string cursor = default(string), int? limit = default(int?))
            {
                return Task.Factory.StartNew(s => ((IMyBlockedUsers)s).GetBlockedUsersAsync(authorization, cursor, limit), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get my blocked users
            /// </summary>
            /// This is a feed of users that I have blocked. Any user on this list
            /// cannot see topics authored by me. However, any such user will
            /// see comments
            /// and replies that I create on topics authored by other users or
            /// by the app.
            /// Any such user will also be able to observe that activities
            /// have been performed
            /// by users on my topics.
            /// I will not appear in any such user's following feed, and those
            /// users will not
            /// appear in my followers feed.
            /// If I am following any user in this feed, that relationship
            /// will continue and I
            /// will continue to see topics and activities by that user and I
            /// will appear in
            /// that user's follower feed and that user will appear in my
            /// following feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cursor'>
            /// Current read cursor
            /// </param>
            /// <param name='limit'>
            /// Number of items to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FeedResponseUserCompactView> GetBlockedUsersAsync(this IMyBlockedUsers operations, string authorization, string cursor = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBlockedUsersWithHttpMessagesAsync(authorization, cursor, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Block a user
            /// </summary>
            /// After I block a user, that user will no longer be able to see topics
            /// authored by me.
            /// However, that user will continue to see comments and replies
            /// that I create on
            /// topics authored by other users or by the app. That user will
            /// also be able to observe
            /// that activities have been performed by users on my topics.
            /// I will no longer appear in that user's following feed, and
            /// that user will no longer
            /// appear in my followers feed.
            /// If I am following that user, that relationship will survive
            /// and I will continue to see
            /// topics and activities by that user and I will appear in that
            /// user's follower feed and
            /// that user will appear in my following feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Post blocked user request
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            public static object PostBlockedUser(this IMyBlockedUsers operations, PostBlockedUserRequest request, string authorization)
            {
                return Task.Factory.StartNew(s => ((IMyBlockedUsers)s).PostBlockedUserAsync(request, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Block a user
            /// </summary>
            /// After I block a user, that user will no longer be able to see topics
            /// authored by me.
            /// However, that user will continue to see comments and replies
            /// that I create on
            /// topics authored by other users or by the app. That user will
            /// also be able to observe
            /// that activities have been performed by users on my topics.
            /// I will no longer appear in that user's following feed, and
            /// that user will no longer
            /// appear in my followers feed.
            /// If I am following that user, that relationship will survive
            /// and I will continue to see
            /// topics and activities by that user and I will appear in that
            /// user's follower feed and
            /// that user will appear in my following feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Post blocked user request
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostBlockedUserAsync(this IMyBlockedUsers operations, PostBlockedUserRequest request, string authorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostBlockedUserWithHttpMessagesAsync(request, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unblock a user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userHandle'>
            /// Handle of blocked user
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            public static object DeleteBlockedUser(this IMyBlockedUsers operations, string userHandle, string authorization)
            {
                return Task.Factory.StartNew(s => ((IMyBlockedUsers)s).DeleteBlockedUserAsync(userHandle, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unblock a user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userHandle'>
            /// Handle of blocked user
            /// </param>
            /// <param name='authorization'>
            /// Format is: "Scheme CredentialsList". Possible values are:
            /// 
            /// - Anon AK=AppKey
            /// 
            /// - SocialPlus TK=SessionToken
            /// 
            /// - Facebook AK=AppKey|TK=AccessToken
            /// 
            /// - Google AK=AppKey|TK=AccessToken
            /// 
            /// - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
            /// 
            /// - Microsoft AK=AppKey|TK=AccessToken
            /// 
            /// - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteBlockedUserAsync(this IMyBlockedUsers operations, string userHandle, string authorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBlockedUserWithHttpMessagesAsync(userHandle, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
